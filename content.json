{"meta":{"title":"爱吃豆豆的小蚂蚁","subtitle":"","description":"爱吃豆豆的小蚂蚁","author":"爱吃豆豆的小蚂蚁","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2025-04-25T08:58:46.000Z","updated":"2025-04-27T02:21:14.167Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"你们好吗？兄弟们"}],"posts":[{"title":"","slug":"linux 安装android编译环境","date":"2025-04-27T02:21:14.166Z","updated":"2025-04-27T02:21:14.166Z","comments":true,"path":"2025/04/27/linux 安装android编译环境/","permalink":"http://example.com/2025/04/27/linux%20%E5%AE%89%E8%A3%85android%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/","excerpt":"","text":"安装jdk17编译环境 12rpm -ivh jdk-17_linux-x64_bin.rpmjava -version 安装gradle-7.2-bin.zip 执行解压命令 1234cd /opt/mkdir gradle &amp;&amp; cd gradle &amp;&amp; mv /opt/gradle-7.2-bin.zip /opt/gradle unzip gradle-7.2-bin.zip 配置环境变量 12export GRADLE_HOME=/opt/gradle/gradle-7.2/binexport PATH=$&#123;PATH&#125;:$GRADLE_HOME 安装android 命令行工具 执行解压命令 1234cd /opt/mkdir android &amp;&amp; cd android &amp;&amp; mv /opt/commandlinetools-linux-10406996_latest.zip /opt/androidunzip commandlinetools-linux-10406996_latest.zip 配置环境变量 123export ANDROID=/opt/androidexport ANDROID_HOME=$ANDROID/android_sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID&#125;/tools:$&#123;ANDROID&#125;/platform-tools:$&#123;ANDROID&#125;/bin:$ANDROID_HOME 1234567sdkmanager --sdk_root=$ANDROID_HOME --install platform-toolssdkmanager --sdk_root=$ANDROD_HOME &quot;build-tools;28.0.3&quot;sdkmanager --sdk_root=$ANDROID_HOME &quot;platforms;android-31&quot;sdkmanager --sdk_root=$ANDROID_HOME &quot;platforms;android-29&quot;sdkmanager --sdk_root=$ANDROID_HOME &quot;ndk;21.1.6352462&quot;sdkmanager --sdk_root=$ANDROID_HOME --licensessdkmanager --sdk_root=$ANDROID_HOME &quot;cmake;3.10.2.4988404&quot;","categories":[],"tags":[]},{"title":"查看mysql日志","slug":"mysql查看日志","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-27T02:21:14.166Z","comments":true,"path":"2025/04/27/mysql查看日志/","permalink":"http://example.com/2025/04/27/mysql%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97/","excerpt":"","text":"general_log日志 日志文件可以记录所有的数据库操作，包括对数据的增删改操作 1.常用命令123456789101112131415161718192021#显示generalLog日志开启是否开启show variables where variable_name=&#x27;general_log&#x27;; #查看generalLog日志文件存儲位置show variables like &#x27;general_log_file&#x27;;#查看日志输出类型show variables like &#x27;log_output&#x27;;#设置日志输出到表中set global log_output=&#x27;table&#x27;;set global log_output=&#x27;file&#x27;;#設置generalLog日志是否开启或者关闭set global general_log=OFF;set global general_log=ON;# 查看操作日志select * from mysql.general_log order by event_time desc;#清理 generalLog日志文件truncate table mysql.general_log; 2.清理磁盘generalLog日志12# 查看general_log_file =/var/lib/mysql/localhost.logcat /dev/null &gt; /var/lib/mysql/localhost.log slow_query_log日志12345678910#查询慢查询相关配置信息show VARIABLES like &#x27;%slow%&#x27;;#查看慢查询设置的时间 默认10秒SHOW VARIABLES LIKE &#x27;long_query_time&#x27;;# 启用/关闭慢查询set global slow_query_log =ON;set global slow_query_log=OFF;# 设置慢查询时间 单位秒默认10秒 可设置毫秒set global long_query_time=2; 三、profiling日志 说明：只能查看当前会话的sql 123456789#查看profiling配置show variables like &#x27;profiling&#x27;;#开启profilingset profiling=1;#查询当前会话执行过的sqlshow profiles;#查询指定的sqlshow profile all for query 2; profile每列含义: Status status出现 converting heap to MySIAM &#x2F;creating tmp table &#x2F;copying to tmp table on disk&#x2F;locked时需要优化 Duration 每个状态的持续时间，以秒为单位 CPU_user 处理该状态的用户 CPU 时间，以秒为单位 CPU_system 处理该状态的系统 CPU 时间，以秒为单位 Context_voluntary 发生在该状态中的自愿上下文切换次数 Context_involuntary 发生在该状态中的非自愿上下文切换次数 Block_ops_in 该状态的输入块操作数量 Block_ops_out 该状态的输出块操作数量 Messages_sent 该状态发送的消息数量 Messages_received 该状态接收的消息数量 Page_faults_major 该状态发生的重要页面错误数量 Page_faults_minor 该状态发生的次要页面错误数量 Swaps 发生的交换次数 Source_function 执行该状态的函数 Source_file 执行该状态的文件 Source_line 执行该状态的行号 四、二进制日志 开启二进制日志，修改my.cnf文件： 1234server-id = 1 # mysql5.7必须加，否则mysql服务启动报错log-bin = /tmp/binlog/mysql-bin # 路径及命名，默认在data下expire_logs_days = 10 # 过期时间,二进制文件自动删除的天数,0代表不删除max_binlog_size = 100M # 单个日志文件大小 二、sql命令 123#查看二进制日志配置信息show variables like &#x27;log_bin%&#x27;;show binary logs; 三、centos命令 导出binLog日志 1mysqlbinlog --base64-output=decode-rows -v /tmp/binlog/mysql-bin/mysql-bin.000001 &gt; binlog.sql","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"后端","slug":"mysql/后端","permalink":"http://example.com/categories/mysql/%E5%90%8E%E7%AB%AF/"}],"tags":[]},{"title":"将jar包制作为linux系统服务","slug":"将jar制作为linux系统服务","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-27T02:21:14.166Z","comments":true,"path":"2025/04/27/将jar制作为linux系统服务/","permalink":"http://example.com/2025/04/27/%E5%B0%86jar%E5%88%B6%E4%BD%9C%E4%B8%BAlinux%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"java启动脚本 脚本路径为&#x2F;opt&#x2F;java&#x2F;bin&#x2F;serviceStart.sh 1234567#!/bin/shulimit -n 65535dir=$(cd `dirname $0` ;pwd)jar=`find $dir -name &#x27;*.java&#x27; -printf &#x27;%f\\n&#x27;`echo $jarnohup java -Dfile.encoding=UTF-8 -Dapp.log.home=$dir -jar $dir/$jar --spring.config.location=$dir/application.yml &gt;&gt; /dev/null 2&gt;&amp;1 &amp; java service脚本 放置于&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;路径下 12345678910111213141516171819[Unit]Description=The java serverAfter=syslog.target network-online.target remote-fs.target nss-lookup.target# After=network.target mysql.service redis.service nginx.service[Service]Type=forkingExecStart=/opt/java/bin/serviceStart.shExecStop=/bin/kill -15 $MAINPIDRemainAfterExit=yesStandardOutput=journal# 当服务死亡后是否总是启动Restart=always# 服务死亡多久后启动RestartSec=10[Install]WantedBy=multi-user.target application.yml配置123456server: shutdown: gracefulspring: lifecycle: timeout-per-shutdown-phase: &quot;15s&quot; 异步及定时器任务线程池配置1234567891011121314151617181920212223242526272829303132@Configuration@EnableSchedulingpublic class SchedulingConfig implements SchedulingConfigurer, ApplicationListener&lt;ContextClosedEvent&gt; &#123; private final Logger log = LoggerFactory.getLogger(this.getClass()); private ThreadPoolTaskScheduler threadPoolTaskScheduler; @Override public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) &#123; ThreadPoolTaskScheduler threadPoolTaskExecutor=new ThreadPoolTaskScheduler(); threadPoolTaskExecutor.setPoolSize(10); //设置等待任务结束再结束线程池 threadPoolTaskExecutor.setWaitForTasksToCompleteOnShutdown(true); //等待任务终止15秒 threadPoolTaskExecutor.setAwaitTerminationSeconds(15); threadPoolTaskExecutor.setThreadNamePrefix(&quot;schedule-&quot;); threadPoolTaskExecutor.initialize(); threadPoolTaskScheduler=threadPoolTaskExecutor; //设置是否在线程池shuthown后仍然执行未开始的任务 threadPoolTaskExecutor.getScheduledThreadPoolExecutor().setExecuteExistingDelayedTasksAfterShutdownPolicy(false); scheduledTaskRegistrar.setTaskScheduler(threadPoolTaskExecutor); &#125; @Override public void onApplicationEvent(ContextClosedEvent event) &#123; if(threadPoolTaskScheduler!=null)&#123; threadPoolTaskScheduler.shutdown(); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930@Slf4j@Configuration@EnableAsyncpublic class AsyncConfig implements AsyncConfigurer,ApplicationListener&lt;ContextClosedEvent&gt; &#123; private ThreadPoolTaskExecutor taskExecutor ; @Override public Executor getAsyncExecutor() &#123; ThreadPoolTaskExecutor threadPoolTaskExecutor=new ThreadPoolTaskExecutor(); threadPoolTaskExecutor.setCorePoolSize(10); threadPoolTaskExecutor.setMaxPoolSize(20); threadPoolTaskExecutor.setQueueCapacity(500); threadPoolTaskExecutor.setWaitForTasksToCompleteOnShutdown(true); threadPoolTaskExecutor.setAwaitTerminationSeconds(15); threadPoolTaskExecutor.setThreadNamePrefix(&quot;normal-async&quot;); threadPoolTaskExecutor.initialize(); taskExecutor=threadPoolTaskExecutor; return threadPoolTaskExecutor; &#125; @Override public void onApplicationEvent(ContextClosedEvent event) &#123; if(taskExecutor!=null)&#123; taskExecutor.shutdown(); &#125; &#125;&#125; 如果有使用redisStream 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798@Slf4j@Configurationpublic class RedisStreamConfig implements ApplicationListener&lt;ApplicationReadyEvent&gt; &#123; @Resource private StringRedisTemplate stringRedisTemplate; private StreamMessageListenerContainer streamMessageListenerContainer; private boolean init = false; @Bean public StreamMessageListenerContainer.StreamMessageListenerContainerOptions&lt;String, ?&gt; streamMessageListenerContainerOptions() &#123; return StreamMessageListenerContainer .StreamMessageListenerContainerOptions .builder() .pollTimeout(Duration.ofSeconds(1)) .build(); &#125; @Bean public StreamMessageListenerContainer streamMessageListenerContainer(RedisConnectionFactory factory, StreamMessageListenerContainer.StreamMessageListenerContainerOptions&lt;String, ?&gt; streamMessageListenerContainerOptions) &#123; StreamMessageListenerContainer listenerContainer = StreamMessageListenerContainer.create(factory, streamMessageListenerContainerOptions); streamMessageListenerContainer = listenerContainer; return listenerContainer; &#125; @Bean public List&lt;Subscription&gt; subscription(StreamMessageListenerContainer streamMessageListenerContainer) &#123; List&lt;Subscription&gt; subscriptions = new ArrayList&lt;&gt;(); subscriptions.addAll(getSubscription(String[]&#123;&quot;consumer1&quot;,&quot;consumer1&quot;&#125;,&quot;testKey&quot;,&quot;test&quot;,streamMessageListenerContainer)); if (init &amp;&amp; !streamMessageListenerContainer.isRunning()) &#123; streamMessageListenerContainer.start(); &#125; return subscriptions; &#125; private List&lt;Subscription&gt; getSubscription(String[] consumers,String stream,String group,StreamMessageListenerContainer streamMessageListenerContainer)&#123; List&lt;Subscription&gt; subscriptions = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; consumers.length; i++) &#123; Subscription subscription = streamMessageListenerContainer.register( StreamMessageListenerContainer.StreamReadRequest.builder(StreamOffset.create(stream, ReadOffset.lastConsumed())).consumer(msgStreamListener.getConsumer()).autoAcknowledge(false) .cancelOnError(throwable -&gt; &#123; return !(throwable instanceof QueryTimeoutException || throwable instanceof RedisConnectionFailureException || throwable instanceof RedisSubscribedConnectionException || throwable instanceof ClusterStateFailureException || throwable instanceof RedisLoadingException); &#125;).build(), new StreamListener&lt;String, MapRecord&lt;String, Object, Object&gt;&gt; () &#123; @Override public void onMessage(MapRecord&lt;String, Object, Object&gt; message) &#123; // 接收到消息 if (MapUtil.isEmpty(message.getValue())) &#123; redisStream.ack(message.getStream(), group, message.getId()); return; &#125; Map&lt;Object, Object&gt; map = message.getValue(); stringRedisTemplate.opsForStream().acknowledge(message.getStream(), group, message.getId()); &#125; &#125; ); subscriptions.add(subscription); &#125; return subscriptions; &#125; @Override public void onApplicationEvent(ApplicationReadyEvent event) &#123; init=true; if (init&amp;&amp;streamMessageListenerContainer != null &amp;&amp; !streamMessageListenerContainer.isRunning()) &#123; streamMessageListenerContainer.start(); &#125; &#125; @EventListener public void onContextClosedEvent(ContextClosedEvent event) &#123; // 处理 ContextClosedEvent 事件逻辑 if(streamMessageListenerContainer!=null&amp;&amp;streamMessageListenerContainer.isRunning())&#123; streamMessageListenerContainer.stop(); &#125; &#125;&#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[]},{"title":"websocket调整字节缓存大小","slug":"websocket调整默认字节缓存大小","date":"2013-07-13T12:46:25.000Z","updated":"2025-04-27T02:21:14.166Z","comments":true,"path":"2013/07/13/websocket调整默认字节缓存大小/","permalink":"http://example.com/2013/07/13/websocket%E8%B0%83%E6%95%B4%E9%BB%98%E8%AE%A4%E5%AD%97%E8%8A%82%E7%BC%93%E5%AD%98%E5%A4%A7%E5%B0%8F/","excerpt":"","text":"方案一：使用代码修改12345678910@Configurationpublic class WebAppRootContext implements ServletContextInitializer &#123; @Override public void onStartup(ServletContext servletContext) throws ServletException &#123; servletContext.addListener(WebAppRootListener.class); servletContext.setInitParameter(&quot;org.apache.tomcat.websocket.textBufferSize&quot;,&quot;16384&quot;); &#125;&#125; 方案二： 添加启动参数1java -Dorg.apache.tomcat.websocket.DEFAULT_BUFFER_SIZE=16384 -jar xxx.jar","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[]}],"categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"后端","slug":"mysql/后端","permalink":"http://example.com/categories/mysql/%E5%90%8E%E7%AB%AF/"},{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[]}