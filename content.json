{"meta":{"title":"爱吃豆豆的小蚂蚁","subtitle":"","description":"爱吃豆豆的小蚂蚁","author":"爱吃豆豆的小蚂蚁","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2025-04-25T08:58:46.000Z","updated":"2025-04-30T09:47:46.878Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"写博客主要是记录工作或生活中一些东西，以前认为自己记性很好，现在发现很多东西都记不住了，为了自己不再重复寻找一些东西，就用博客的形式记录下来。同时希望我写的文章能帮助到有需要的人。"}],"posts":[{"title":"websocket调整字节缓存大小","slug":"websocket调整默认字节缓存大小","date":"2025-04-27T12:46:25.000Z","updated":"2025-04-30T09:47:46.877Z","comments":true,"path":"2025/04/27/websocket调整默认字节缓存大小/","permalink":"http://example.com/2025/04/27/websocket%E8%B0%83%E6%95%B4%E9%BB%98%E8%AE%A4%E5%AD%97%E8%8A%82%E7%BC%93%E5%AD%98%E5%A4%A7%E5%B0%8F/","excerpt":"","text":"方案一：使用代码修改12345678910@Configurationpublic class WebAppRootContext implements ServletContextInitializer &#123; @Override public void onStartup(ServletContext servletContext) throws ServletException &#123; servletContext.addListener(WebAppRootListener.class); servletContext.setInitParameter(&quot;org.apache.tomcat.websocket.textBufferSize&quot;,&quot;16384&quot;); &#125;&#125; 方案二： 添加启动参数1java -Dorg.apache.tomcat.websocket.DEFAULT_BUFFER_SIZE=16384 -jar xxx.jar","categories":[{"name":"server","slug":"server","permalink":"http://example.com/categories/server/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"linux安装android环境","slug":"linux 安装android编译环境","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-30T09:47:46.877Z","comments":true,"path":"2025/04/27/linux 安装android编译环境/","permalink":"http://example.com/2025/04/27/linux%20%E5%AE%89%E8%A3%85android%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/","excerpt":"","text":"安装jdk17编译环境12rpm -ivh jdk-17_linux-x64_bin.rpmjava -version 安装gradle-7.2-bin.zip 执行解压命令 1234cd /opt/mkdir gradle &amp;&amp; cd gradle &amp;&amp; mv /opt/gradle-7.2-bin.zip /opt/gradle unzip gradle-7.2-bin.zip 配置环境变量 12export GRADLE_HOME=/opt/gradle/gradle-7.2/binexport PATH=$&#123;PATH&#125;:$GRADLE_HOME 3.安装android 命令行工具 执行解压命令 1234cd /opt/mkdir android &amp;&amp; cd android &amp;&amp; mv /opt/commandlinetools-linux-10406996_latest.zip /opt/androidunzip commandlinetools-linux-10406996_latest.zip 配置环境变量 123export ANDROID=/opt/androidexport ANDROID_HOME=$ANDROID/android_sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID&#125;/tools:$&#123;ANDROID&#125;/platform-tools:$&#123;ANDROID&#125;/bin:$ANDROID_HOME 1234567sdkmanager --sdk_root=$ANDROID_HOME --install platform-toolssdkmanager --sdk_root=$ANDROD_HOME &quot;build-tools;28.0.3&quot;sdkmanager --sdk_root=$ANDROID_HOME &quot;platforms;android-31&quot;sdkmanager --sdk_root=$ANDROID_HOME &quot;platforms;android-29&quot;sdkmanager --sdk_root=$ANDROID_HOME &quot;ndk;21.1.6352462&quot;sdkmanager --sdk_root=$ANDROID_HOME --licensessdkmanager --sdk_root=$ANDROID_HOME &quot;cmake;3.10.2.4988404&quot;","categories":[{"name":"android","slug":"android","permalink":"http://example.com/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://example.com/tags/android/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"查看mysql日志","slug":"mysql查看日志","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-30T09:47:46.877Z","comments":true,"path":"2025/04/27/mysql查看日志/","permalink":"http://example.com/2025/04/27/mysql%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97/","excerpt":"","text":"general_log日志日志文件可以记录所有的数据库操作，包括对数据的增删改操作 1.常用命令 123456789101112131415161718192021#显示generalLog日志开启是否开启show variables where variable_name=&#x27;general_log&#x27;; #查看generalLog日志文件存儲位置show variables like &#x27;general_log_file&#x27;;#查看日志输出类型show variables like &#x27;log_output&#x27;;#设置日志输出到表中set global log_output=&#x27;table&#x27;;set global log_output=&#x27;file&#x27;;#設置generalLog日志是否开启或者关闭set global general_log=OFF;set global general_log=ON;# 查看操作日志select * from mysql.general_log order by event_time desc;#清理 generalLog日志文件truncate table mysql.general_log; 2.清理磁盘generalLog日志 12# 查看general_log_file =/var/lib/mysql/localhost.logcat /dev/null &gt; /var/lib/mysql/localhost.log 3.slow_query_log日志 12345678910#查询慢查询相关配置信息show VARIABLES like &#x27;%slow%&#x27;;#查看慢查询设置的时间 默认10秒SHOW VARIABLES LIKE &#x27;long_query_time&#x27;;# 启用/关闭慢查询set global slow_query_log =ON;set global slow_query_log=OFF;# 设置慢查询时间 单位秒默认10秒 可设置毫秒set global long_query_time=2; 三、profiling日志 说明：只能查看当前会话的sql 123456789#查看profiling配置show variables like &#x27;profiling&#x27;;#开启profilingset profiling=1;#查询当前会话执行过的sqlshow profiles;#查询指定的sqlshow profile all for query 2; profile每列含义: Status status出现 converting heap to MySIAM &#x2F;creating tmp table &#x2F;copying to tmp table on disk&#x2F;locked时需要优化 Duration 每个状态的持续时间，以秒为单位 CPU_user 处理该状态的用户 CPU 时间，以秒为单位 CPU_system 处理该状态的系统 CPU 时间，以秒为单位 Context_voluntary 发生在该状态中的自愿上下文切换次数 Context_involuntary 发生在该状态中的非自愿上下文切换次数 Block_ops_in 该状态的输入块操作数量 Block_ops_out 该状态的输出块操作数量 Messages_sent 该状态发送的消息数量 Messages_received 该状态接收的消息数量 Page_faults_major 该状态发生的重要页面错误数量 Page_faults_minor 该状态发生的次要页面错误数量 Swaps 发生的交换次数 Source_function 执行该状态的函数 Source_file 执行该状态的文件 Source_line 执行该状态的行号 四、二进制日志 开启二进制日志，修改my.cnf文件： 1234server-id = 1 # mysql5.7必须加，否则mysql服务启动报错log-bin = /tmp/binlog/mysql-bin # 路径及命名，默认在data下expire_logs_days = 10 # 过期时间,二进制文件自动删除的天数,0代表不删除max_binlog_size = 100M # 单个日志文件大小 sql命令 123#查看二进制日志配置信息show variables like &#x27;log_bin%&#x27;;show binary logs; centos命令 导出binLog日志 1mysqlbinlog --base64-output=decode-rows -v /tmp/binlog/mysql-bin/mysql-bin.000001 &gt; binlog.sql","categories":[{"name":"server","slug":"server","permalink":"http://example.com/categories/server/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"通用yml配置","slug":"springboot yml配置","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-30T09:47:46.877Z","comments":true,"path":"2025/04/27/springboot yml配置/","permalink":"http://example.com/2025/04/27/springboot%20yml%E9%85%8D%E7%BD%AE/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081logging: config: classpath:logback-spring.xml level: com.zaxxer.hikari: INFOserver: port: 8080 tomcat: processorCache: 500 threads: max: 1000 min-spare: 200 max-http-form-post-size: 10MB #任何 HTTP post 请求中表单内容的最大大小 默认2MB max-swallow-size: 10MB #可吞咽的请求主体的最大数量 默认2MB shutdown: graceful servlet: context-path: /front multipart: #根需要限制文件上传大小 max-file-size: 1024MB #默认1m max-request-size: 1024MB #默认10m mvc: static-path-pattern: /** #用于静态资源的路径模式 web: resources: static-locations: classpath:/static/,file:/opt/html/mybatis-plus: global-config: db-config: logic-delete-field: deleted # 全局逻辑删除字段名 logic-delete-value: 1 # 逻辑已删除值 logic-not-delete-value: 0 # 逻辑未删除值 configuration: log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl typeEnumsPackage: com.enums #配置枚举spring: main: allow-circular-references: true # 允许循环引用 application: name: test config: activate: on-profile: dev lifecycle: timeout-per-shutdown-phase: &quot;15s&quot; task: scheduling: pool: size: 5 shutdown: await-termination: true await-termination-period: &quot;15s&quot; execution: shutdown: await-termination: true await-termination-period: &quot;15s&quot; datasource: #替换mysql数据库连接、用户名、密码+- url: jdbc:mysql://127.0.0.1:3306/test?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai username: root password: root hikari: minimum-idle: 10 # 最小空闲连接数 maximum-pool-size: 40 #限制连接池最大连接数 connection-timeout: 30000 #客户端等待连接的超时时间 max-lifetime: 600000 #连接最大存活时间 validation-timeout: 5000 #连接有效性验证超时时间 idle-timeout: 180000 #空闲连接最大存活时间 keepalive-time: 300000 # 5分钟发送保活探测 leak-detection-threshold: 30000 #10秒泄漏检测阈值 sql: init: schema-locations: classpath:init-database.sql # ddl脚本路径 encoding: utf-8 #脚本编码格式 mode: ALWAYS # ALWAYS 总是执行 EMBEDDED 嵌入式数据库专用 NEVER 从不执行","categories":[{"name":"server","slug":"server","permalink":"http://example.com/categories/server/"}],"tags":[{"name":"yaml","slug":"yaml","permalink":"http://example.com/tags/yaml/"}]},{"title":"将jar包制作为linux系统服务","slug":"将jar制作为linux系统服务","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-30T09:47:46.878Z","comments":true,"path":"2025/04/27/将jar制作为linux系统服务/","permalink":"http://example.com/2025/04/27/%E5%B0%86jar%E5%88%B6%E4%BD%9C%E4%B8%BAlinux%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"java启动脚本 脚本路径为&#x2F;opt&#x2F;java&#x2F;bin&#x2F;serviceStart.sh 1234567#!/bin/shulimit -n 65535dir=$(cd `dirname $0` ;pwd)jar=`find $dir -name &#x27;*.java&#x27; -printf &#x27;%f\\n&#x27;`echo $jarnohup java -Dfile.encoding=UTF-8 -Dapp.log.home=$dir -jar $dir/$jar --spring.config.location=$dir/application.yml &gt;&gt; /dev/null 2&gt;&amp;1 &amp; java service脚本 放置于&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;路径下 12345678910111213141516171819[Unit]Description=The java serverAfter=syslog.target network-online.target remote-fs.target nss-lookup.target# After=network.target mysql.service redis.service nginx.service[Service]Type=forkingExecStart=/opt/java/bin/serviceStart.shExecStop=/bin/kill -15 $MAINPIDRemainAfterExit=yesStandardOutput=journal# 当服务死亡后是否总是启动Restart=always# 服务死亡多久后启动RestartSec=10[Install]WantedBy=multi-user.target application.yml配置123456server: shutdown: gracefulspring: lifecycle: timeout-per-shutdown-phase: &quot;15s&quot; 异步及定时器任务线程池配置1234567891011121314151617181920212223242526272829303132@Configuration@EnableSchedulingpublic class SchedulingConfig implements SchedulingConfigurer, ApplicationListener&lt;ContextClosedEvent&gt; &#123; private final Logger log = LoggerFactory.getLogger(this.getClass()); private ThreadPoolTaskScheduler threadPoolTaskScheduler; @Override public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) &#123; ThreadPoolTaskScheduler threadPoolTaskExecutor=new ThreadPoolTaskScheduler(); threadPoolTaskExecutor.setPoolSize(10); //设置等待任务结束再结束线程池 threadPoolTaskExecutor.setWaitForTasksToCompleteOnShutdown(true); //等待任务终止15秒 threadPoolTaskExecutor.setAwaitTerminationSeconds(15); threadPoolTaskExecutor.setThreadNamePrefix(&quot;schedule-&quot;); threadPoolTaskExecutor.initialize(); threadPoolTaskScheduler=threadPoolTaskExecutor; //设置是否在线程池shuthown后仍然执行未开始的任务 threadPoolTaskExecutor.getScheduledThreadPoolExecutor().setExecuteExistingDelayedTasksAfterShutdownPolicy(false); scheduledTaskRegistrar.setTaskScheduler(threadPoolTaskExecutor); &#125; @Override public void onApplicationEvent(ContextClosedEvent event) &#123; if(threadPoolTaskScheduler!=null)&#123; threadPoolTaskScheduler.shutdown(); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930@Slf4j@Configuration@EnableAsyncpublic class AsyncConfig implements AsyncConfigurer,ApplicationListener&lt;ContextClosedEvent&gt; &#123; private ThreadPoolTaskExecutor taskExecutor ; @Override public Executor getAsyncExecutor() &#123; ThreadPoolTaskExecutor threadPoolTaskExecutor=new ThreadPoolTaskExecutor(); threadPoolTaskExecutor.setCorePoolSize(10); threadPoolTaskExecutor.setMaxPoolSize(20); threadPoolTaskExecutor.setQueueCapacity(500); threadPoolTaskExecutor.setWaitForTasksToCompleteOnShutdown(true); threadPoolTaskExecutor.setAwaitTerminationSeconds(15); threadPoolTaskExecutor.setThreadNamePrefix(&quot;normal-async&quot;); threadPoolTaskExecutor.initialize(); taskExecutor=threadPoolTaskExecutor; return threadPoolTaskExecutor; &#125; @Override public void onApplicationEvent(ContextClosedEvent event) &#123; if(taskExecutor!=null)&#123; taskExecutor.shutdown(); &#125; &#125;&#125; 如果有使用redisStream 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798@Slf4j@Configurationpublic class RedisStreamConfig implements ApplicationListener&lt;ApplicationReadyEvent&gt; &#123; @Resource private StringRedisTemplate stringRedisTemplate; private StreamMessageListenerContainer streamMessageListenerContainer; private boolean init = false; @Bean public StreamMessageListenerContainer.StreamMessageListenerContainerOptions&lt;String, ?&gt; streamMessageListenerContainerOptions() &#123; return StreamMessageListenerContainer .StreamMessageListenerContainerOptions .builder() .pollTimeout(Duration.ofSeconds(1)) .build(); &#125; @Bean public StreamMessageListenerContainer streamMessageListenerContainer(RedisConnectionFactory factory, StreamMessageListenerContainer.StreamMessageListenerContainerOptions&lt;String, ?&gt; streamMessageListenerContainerOptions) &#123; StreamMessageListenerContainer listenerContainer = StreamMessageListenerContainer.create(factory, streamMessageListenerContainerOptions); streamMessageListenerContainer = listenerContainer; return listenerContainer; &#125; @Bean public List&lt;Subscription&gt; subscription(StreamMessageListenerContainer streamMessageListenerContainer) &#123; List&lt;Subscription&gt; subscriptions = new ArrayList&lt;&gt;(); subscriptions.addAll(getSubscription(String[]&#123;&quot;consumer1&quot;,&quot;consumer1&quot;&#125;,&quot;testKey&quot;,&quot;test&quot;,streamMessageListenerContainer)); if (init &amp;&amp; !streamMessageListenerContainer.isRunning()) &#123; streamMessageListenerContainer.start(); &#125; return subscriptions; &#125; private List&lt;Subscription&gt; getSubscription(String[] consumers,String stream,String group,StreamMessageListenerContainer streamMessageListenerContainer)&#123; List&lt;Subscription&gt; subscriptions = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; consumers.length; i++) &#123; Subscription subscription = streamMessageListenerContainer.register( StreamMessageListenerContainer.StreamReadRequest.builder(StreamOffset.create(stream, ReadOffset.lastConsumed())).consumer(msgStreamListener.getConsumer()).autoAcknowledge(false) .cancelOnError(throwable -&gt; &#123; return !(throwable instanceof QueryTimeoutException || throwable instanceof RedisConnectionFailureException || throwable instanceof RedisSubscribedConnectionException || throwable instanceof ClusterStateFailureException || throwable instanceof RedisLoadingException); &#125;).build(), new StreamListener&lt;String, MapRecord&lt;String, Object, Object&gt;&gt; () &#123; @Override public void onMessage(MapRecord&lt;String, Object, Object&gt; message) &#123; // 接收到消息 if (MapUtil.isEmpty(message.getValue())) &#123; redisStream.ack(message.getStream(), group, message.getId()); return; &#125; Map&lt;Object, Object&gt; map = message.getValue(); stringRedisTemplate.opsForStream().acknowledge(message.getStream(), group, message.getId()); &#125; &#125; ); subscriptions.add(subscription); &#125; return subscriptions; &#125; @Override public void onApplicationEvent(ApplicationReadyEvent event) &#123; init=true; if (init&amp;&amp;streamMessageListenerContainer != null &amp;&amp; !streamMessageListenerContainer.isRunning()) &#123; streamMessageListenerContainer.start(); &#125; &#125; @EventListener public void onContextClosedEvent(ContextClosedEvent event) &#123; // 处理 ContextClosedEvent 事件逻辑 if(streamMessageListenerContainer!=null&amp;&amp;streamMessageListenerContainer.isRunning())&#123; streamMessageListenerContainer.stop(); &#125; &#125;&#125;","categories":[{"name":"server","slug":"server","permalink":"http://example.com/categories/server/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"常用curl命令","slug":"常用命令","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-30T09:47:46.878Z","comments":true,"path":"2025/04/27/常用命令/","permalink":"http://example.com/2025/04/27/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"1. 测试websocket连通性 12curl --include --no-buffer --header &quot;Connection: Upgrade&quot; --header &quot;Upgrade: websocket&quot; --header &quot;Host: 127.0.0.1:80&quot; --header &quot;Origin: http://127.0.0.1:80&quot; --header &quot;Sec-WebSocket-Key: SGVs.bG8sIHdvcmxkIQ==&quot; --header &quot;Sec-WebSocket-Version: 13&quot; http://127.0.0.1/clientWebsocket/3eddf 2.测试TCP连通性 12telnet 127.0.0.1 9000 3.测试UDP连通性 1","categories":[{"name":"server","slug":"server","permalink":"http://example.com/categories/server/"}],"tags":[{"name":"crul","slug":"crul","permalink":"http://example.com/tags/crul/"}]},{"title":"logback-psring.xml配置","slug":"通用logback","date":"2025-04-27T02:00:00.000Z","updated":"2025-04-30T09:47:46.878Z","comments":true,"path":"2025/04/27/通用logback/","permalink":"http://example.com/2025/04/27/%E9%80%9A%E7%94%A8logback/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;30 seconds&quot; debug=&quot;false&quot;&gt; &lt;!-- 基础路径配置 --&gt; &lt;property name=&quot;LOG_BASE&quot; value=&quot;$&#123;app.log.home:-.&#125;/log&quot;/&gt; &lt;property name=&quot;LOG_PATTERN&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; |%highlight(%-5level) |%X&#123;trace_id&#125; |%thread |%boldMagenta(%logger&#123;36&#125;):%line |%cyan(%msg)%n&quot;/&gt; &lt;!-- 控制台异步输出 --&gt; &lt;appender name=&quot;CONSOLE_ASYNC&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt; &lt;queueSize&gt;2048&lt;/queueSize&gt; &lt;discardingThreshold&gt;0&lt;/discardingThreshold&gt; &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt; &lt;/appender&gt; &lt;!-- 控制台Appender --&gt; &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;$&#123;LOG_PATTERN&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- 文件异步输出 --&gt; &lt;appender name=&quot;FILE_ASYNC&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt; &lt;queueSize&gt;2048&lt;/queueSize&gt; &lt;discardingThreshold&gt;0&lt;/discardingThreshold&gt; &lt;maxFlushTime&gt;1000&lt;/maxFlushTime&gt; &lt;appender-ref ref=&quot;FILE_ROLLING&quot;/&gt; &lt;/appender&gt; &lt;!-- 滚动文件Appender --&gt; &lt;appender name=&quot;FILE_ROLLING&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;file&gt;$&#123;LOG_BASE&#125;/info/app.log&lt;/file&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;LOG_BASE&#125;/info/%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt; &lt;maxFileSize&gt;200MB&lt;/maxFileSize&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;totalSizeCap&gt;10GB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;$&#123;LOG_PATTERN&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- 错误日志专用通道 --&gt; &lt;appender name=&quot;ERROR_ASYNC&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt; &lt;queueSize&gt;1024&lt;/queueSize&gt; &lt;discardingThreshold&gt;0&lt;/discardingThreshold&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;/filter&gt; &lt;appender-ref ref=&quot;ERROR_ROLLING&quot;/&gt; &lt;/appender&gt; &lt;!-- 错误日志滚动策略 --&gt; &lt;appender name=&quot;ERROR_ROLLING&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;file&gt;$&#123;LOG_BASE&#125;/error/error.log&lt;/file&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;LOG_BASE&#125;/error/%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt; &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt; &lt;maxHistory&gt;180&lt;/maxHistory&gt; &lt;totalSizeCap&gt;5GB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;$&#123;LOG_PATTERN&#125;&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- 根日志配置 --&gt; &lt;root level=&quot;INFO&quot;&gt; &lt;appender-ref ref=&quot;CONSOLE_ASYNC&quot;/&gt; &lt;appender-ref ref=&quot;FILE_ASYNC&quot;/&gt; &lt;appender-ref ref=&quot;ERROR_ASYNC&quot;/&gt; &lt;/root&gt; &lt;!-- 业务模块日志 --&gt; &lt;logger name=&quot;com.test&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;/&gt; &lt;!-- Spring框架降噪 --&gt; &lt;logger name=&quot;org.springframework&quot; level=&quot;WARN&quot;/&gt; &lt;logger name=&quot;org.hibernate&quot; level=&quot;WARN&quot;/&gt;&lt;/configuration&gt;","categories":[{"name":"server","slug":"server","permalink":"http://example.com/categories/server/"}],"tags":[{"name":"logback","slug":"logback","permalink":"http://example.com/tags/logback/"}]}],"categories":[{"name":"server","slug":"server","permalink":"http://example.com/categories/server/"},{"name":"android","slug":"android","permalink":"http://example.com/categories/android/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"android","slug":"android","permalink":"http://example.com/tags/android/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"yaml","slug":"yaml","permalink":"http://example.com/tags/yaml/"},{"name":"crul","slug":"crul","permalink":"http://example.com/tags/crul/"},{"name":"logback","slug":"logback","permalink":"http://example.com/tags/logback/"}]}